@startuml Klassendiagramm Pokeballers


class Mainview {
  - startupimg: Image
  - submit: Button
  - pokemonname: String
  - pokemonApi: PokemonApi
  + Mainview()
}

class Pokedex {
  - logo: Image
  - searchbar: TextField
  - submit: Button
  - pokemon: Pokemon
  - pokemonApi: PokemonApi
  - pokemonSprites: PokemonSprites
  - pokemonMove: PokemonMove
  + Pokedex()
}

class Pokemon {
  - logger: Logger
  - id: int
  - name: String
  - base_experience: int
  - height: int
  - is_default: boolean
  - order: int
  - weight: int
  - location_area_encounters: String
  - sprites: PokemonSprites
  - species: NamedAPIResource
  - abilities: List<PokemonAbility>
  - forms: List<NamedAPIResource>
  - game_indices: List<VersionGameIndex>
  - stats: List<PokemonStat>
  - types: List<PokemonType>
  - moves: List<PokemonMove>
  
  + Pokemon(id: int, name: String, base_experience: int, height: int, is_default: boolean, order: int, weight: int, abilities: List<PokemonAbility>, forms: List<NamedAPIResource>, game_indices: List<VersionGameIndex>, location_area_encounters: String, moves: List<PokemonMove>, sprites: PokemonSprites, species: NamedAPIResource, stats: List<PokemonStat>, types: List<PokemonType>)
  + getId(): int
  + setId(id: int): void
  + getName(): String
  + setName(name: String): void
  + getBase_experience(): int
  + setBase_experience(base_experience: int): void
  + getHeight(): int
  + setHeight(height: int): void
  + isIs_default(): boolean
  + setIs_default(is_default: boolean): void
  + getOrder(): int
  + setOrder(order: int): void
  + getWeight(): int
  + setWeight(weight: int): void
  + getLocation_area_encounters(): String
  + setLocation_area_encounters(location_area_encounters: String): void
  + getMoves(): List<PokemonMove>
  + setMoves(moves: List<PokemonMove>): void
  + getSprites(): PokemonSprites
  + setSprites(sprites: PokemonSprites): void
  + getSpecies(): NamedAPIResource
  + setSpecies(species: NamedAPIResource): void
  + getStats(): List<PokemonStat>
  + setStats(stats: List<PokemonStat>): void
  + getTypes(): List<PokemonType>
  + setTypes(types: List<PokemonType>): void
  + getAbilities(): List<PokemonAbility>
  + setAbilities(abilities: List<PokemonAbility>): void
  + getForms(): List<NamedAPIResource>
  + setForms(forms: List<NamedAPIResource>): void
  + getGame_indices(): List<VersionGameIndex>
  + setGame_indices(game_indices: List<VersionGameIndex>): void
  + toString(): String
}

class Ability {
  - logger: Logger
  - id: int
  - name: String
  - is_main_series: boolean
  - generation: NamedAPIResource
  - names: List<Name>
  - effect_changes: List<AbilityEffectChange>
  - flavor_text_entries: List<AbilityFlavorText>
  - pokemon: List<AbilityPokemon>
  + Ability()
  + Ability(id: int, name: String, is_main_series: boolean, generation: NamedAPIResource, names: List<Name>, effect_changes: List<AbilityEffectChange>, flavor_text_entries: List<AbilityFlavorText>, pokemon: List<AbilityPokemon>)
  + getId(): int
  + setId(id: int): void
  + getName(): String
  + setName(name: String): void
  + isIs_main_series(): boolean
  + setIs_main_series(is_main_series: boolean): void
  + getGeneration(): NamedAPIResource
  + setGeneration(generation: NamedAPIResource): void
  + getNames(): List<Name>
  + setNames(names: List<Name>): void
  + getEffect_changes(): List<AbilityEffectChange>
  + setEffect_changes(effect_changes: List<AbilityEffectChange>): void
  + getFlavor_text_entries(): List<AbilityFlavorText>
  + setFlavor_text_entries(flavor_text_entries: List<AbilityFlavorText>): void
  + getPokemon(): List<AbilityPokemon>
  + setPokemon(pokemon: List<AbilityPokemon>): void
  + toString(): String
}

class PokemonSprites {
  - logger: Logger
  - front_default: String
  - front_shiny: String
  - front_female: String
  - front_shiny_female: String
  - back_default: String
  - back_shiny: String
  - back_female: String
  - back_shiny_female: String
  + PokemonSprites(front_default: String, front_shiny: String, front_female: String, front_shiny_female: String, back_default: String, back_shiny: String, back_female: String, back_shiny_female: String)
  + getFront_default(): String
  + setFront_default(front_default: String): void
  + getFront_shiny(): String
  + setFront_shiny(front_shiny: String): void
  + getFront_female(): String
  + setFront_female(front_female: String): void
  + getFront_shiny_female(): String
  + setFront_shiny_female(front_shiny_female: String): void
  + getBack_default(): String
  + setBack_default(back_default: String): void
  + getBack_shiny(): String
  + setBack_shiny(back_shiny: String): void
  + getBack_female(): String
  + setBack_female(back_female: String): void
  + getBack_shiny_female(): String
  + setBack_shiny_female(back_shiny_female: String): void
  + toString(): String
}

class PokemonApi {
  - logger: Logger
  + getPokemonDataById(id: int): Pokemon
  + getPokemonDataByName(name: String): Pokemon
  - getPokemonData(url: String): Pokemon
}

class AbilitiesPokemonApi {
  - logger: Logger
  + getPokemonAbilityDataById(int): Ability
  + getPokemonAbilityDataByName(String): Ability
  - getAbilityData(String): Ability
}

class NamedAPIResource {
  - logger: Logger
  - name: String
  - url: String
  + NamedAPIResource(String, String)
  + NamedAPIResource()
  + getName(): String
  + setName(String): void
  + getUrl(): String
  + setUrl(String): void
  + toString(): String
}

class Name {
  - logger: Logger
  - name: String
  - language: NamedAPIResource
  + Name(String, NamedAPIResource)
  + getName(): String
  + setName(String): void
  + getLanguage(): NamedAPIResource
  + setLanguage(NamedAPIResource): void
  + toString(): String
}

class AbilityEffectChange {
  - logger: Logger
  - effect_entries: List<Effect>
  - version_group: NamedAPIResource
  + AbilityEffectChange(effect_entries: List<Effect>, version_group: NamedAPIResource)
  + AbilityEffectChange()
  + getEffect_entries(): List<Effect>
  + setEffect_entries(effect_entries: List<Effect>): void
  + getVersion_group(): NamedAPIResource
  + setVersion_group(version_group: NamedAPIResource): void
  + toString(): String
}

class PokemonAbility {
  - logger: Logger
  - is_hidden: boolean
  - slot: int
  - ability: NamedAPIResource
  
  + PokemonAbility(is_hidden: boolean, slot: int, ability: NamedAPIResource)
  + isIs_hidden(): boolean
  + setIs_hidden(is_hidden: boolean): void
  + getSlot(): int
  + setSlot(slot: int): void
  + getAbility(): NamedAPIResource
  + setAbility(ability: NamedAPIResource): void
  + toString(): String
}

class PokemonMove {
  - logger: Logger
  - move: NamedAPIResource
  - version_group_details: List<PokemonMoveVersion>
  + PokemonMove(move: NamedAPIResource, version_group_details: List<PokemonMoveVersion>)
  + getMove(): NamedAPIResource
  + setMove(move: NamedAPIResource): void
  + getVersion_group_details(): List<PokemonMoveVersion>
  + setVersion_group_details(version_group_details: List<PokemonMoveVersion>): void
  + toString(): String
}

class PokemonMoveVersion {
  - logger: Logger
  - move_learn_method: NamedAPIResource
  - version_group: NamedAPIResource
  - level_learned_at: int
  + PokemonMoveVersion(move_learn_method: NamedAPIResource, version_group: NamedAPIResource, level_learned_at: int)
  + getMove_learn_method(): NamedAPIResource
  + setMove_learn_method(move_learn_method: NamedAPIResource): void
  + getVersion_group(): NamedAPIResource
  + setVersion_group(version_group: NamedAPIResource): void
  + getLevel_learned_at(): int
  + setLevel_learned_at(level_learned_at: int): void
  + toString(): String
}

class PokemonStat {
  - logger: Logger
  - stat: NamedAPIResource
  - effort: int
  - base_stat: int
  + PokemonStat(stat: NamedAPIResource, effort: int, base_stat: int)
  + getStat(): NamedAPIResource
  + setStat(stat: NamedAPIResource): void
  + getEffort(): int
  + setEffort(effort: int): void
  + getBase_stat(): int
  + setBase_stat(base_stat: int): void
  + toString(): String
}

class PokemonType {
  - logger: Logger
  - slot: int
  - type: NamedAPIResource
  + PokemonType(slot: int, type: NamedAPIResource)
  + getSlot(): int
  + setSlot(slot: int): void
  + getType(): NamedAPIResource
  + setType(type: NamedAPIResource): void
  + toString(): String
}

class VersionGameIndex {
  - logger: Logger
  - game_index: int
  - version: NamedAPIResource
  + VersionGameIndex(game_index: int, version: NamedAPIResource)
  + getGame_index(): int
  + setGame_index(game_index: int): void
  + getVersion(): NamedAPIResource
  + setVersion(version: NamedAPIResource): void
  + toString(): String
}

class Effect {
  - logger: Logger
  - effect: String
  - language: NamedAPIResource
  + Effect(String, NamedAPIResource)
  + getEffect(): String
  + setEffect(String): void
  + getLanguage(): NamedAPIResource
  + setLanguage(NamedAPIResource): void
  + toString(): String
}

class AbilityFlavorText {
  - logger: Logger
  - flavor_text: String
  - language: NamedAPIResource
  - version_group: NamedAPIResource
  + AbilityFlavorText(flavor_text: String, language: NamedAPIResource, version_group: NamedAPIResource)
  + AbilityFlavorText()
  + getFlavor_text(): String
  + setFlavor_text(flavor_text: String): void
  + getLanguage(): NamedAPIResource
  + setLanguage(language: NamedAPIResource): void
  + getVersion_group(): NamedAPIResource
  + setVersion_group(version_group: NamedAPIResource): void
  + toString(): String
}

class AbilityPokemon {
  - logger: Logger
  - is_hidden: boolean
  - slot: int
  - pokemon: NamedAPIResource
  + AbilityPokemon(boolean, int, NamedAPIResource)
  + isIs_hidden(): boolean
  + setIs_hidden(boolean): void
  + getSlot(): int
  + setSlot(int): void
  + getPokemon(): NamedAPIResource
  + setPokemon(NamedAPIResource): void
  + toString(): String
}

class Description {
  - logger: Logger
  - description: String
  - language: NamedAPIResource
  + Description(String, NamedAPIResource)
  + getDescription(): String
  + setDescription(String): void
  + getLanguage(): NamedAPIResource
  + setLanguage(NamedAPIResource): void
  + toString(): String
}

Mainview -- Pokedex
Pokedex -- NamedAPIResource
AbilitiesPokemonApi -- Ability
Ability -- Name
Ability -- AbilityEffectChange
Ability -- AbilityFlavorText
Ability -- AbilityPokemon
AbilityEffectChange -- Effect
AbilityFlavorText -- NamedAPIResource
AbilityFlavorText -- NamedAPIResource
AbilityPokemon -- NamedAPIResource
Pokemon -- PokemonAbility
Pokemon -- NamedAPIResource
Pokemon -- PokemonMove
Pokemon -- PokemonStat
Pokemon -- PokemonType
Pokemon -- VersionGameIndex
Pokemon -- PokemonSprites
Pokemon -- Description
PokemonAbility -- NamedAPIResource
PokemonMove -- NamedAPIResource
PokemonMove -- PokemonMoveVersion
PokemonMoveVersion -- NamedAPIResource
PokemonStat -- NamedAPIResource
PokemonType -- NamedAPIResource
VersionGameIndex -- NamedAPIResource
Effect -- NamedAPIResource
Description -- NamedAPIResource

@enduml